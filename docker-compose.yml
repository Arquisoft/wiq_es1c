version: '5'
services:
  friend:
    restart: unless-stopped
    container_name: friends-${teamname:-defaultASW}
    image: ghcr.io/arquisoft/wiq_es1c/friends:latest
    profiles: ["dev", "prod"]
    build: ./friends_service
    environment:
      - DB_URL=set
    depends_on:
      FriendDataDB:
        condition: service_healthy
    ports:
      - "8005:8005"
    networks:
      - mynetwork

  question:
    restart: unless-stopped
    container_name: question-${teamname:-defaultASW}
    image: ghcr.io/arquisoft/wiq_es1c/question:latest
    profiles: ["dev", "prod"]
    build: ./question_service
    environment:
      - DB_URL=set
    ports:
      - "8002:8002"
    networks:
      - mynetwork

  game:
    restart: unless-stopped
    container_name: game-${teamname:-defaultASW}
    image: ghcr.io/arquisoft/wiq_es1c/game:latest
    profiles: ["dev", "prod"]
    build: ./game_service
    environment:
      - DB_URL=set
    depends_on:
      GameDataDB:
        condition: service_healthy
    ports:
      - "8003:8003"
    networks:
      - mynetwork

  auth:
    restart: unless-stopped
    container_name: auth-${teamname:-defaultASW}
    image: ghcr.io/arquisoft/wiq_es1c/auth:latest
    profiles: ["dev", "prod"]
    build: ./auth_service
    environment:
      - DB_URL=set
    depends_on:
      UserDataDB:
        condition: service_healthy
    ports:
      - "8001:8001"
    networks:
      - mynetwork

  userdetails:
    restart: unless-stopped
    container_name: userdetails-${teamname:-defaultASW}
    image: ghcr.io/arquisoft/wiq_es1c/userdetails:latest
    profiles: [ "dev", "prod" ]
    build: ./userdetails_service
    depends_on:
      - game
      - auth
    ports:
      - "8004:8004"
    networks:
      - mynetwork

  webapp:
    restart: unless-stopped
    container_name: webapp-${teamname:-defaultASW}
    image: ghcr.io/arquisoft/wiq_es1c/webapp:latest
    profiles: ["dev", "prod"]
    build: ./webapp
    depends_on:
      - question
      - userdetails
      - auth
      - game
    ports:
      - "80:3000" 

# Monitoring Containers
  prometheus:
    restart: unless-stopped
    image: prom/prometheus
    container_name: prometheus-${teamname:-defaultASW}
    profiles: [ "dev", "prod" ]
    networks:
      - mynetwork
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on: 
      - question
      - game
      - auth
      - userdetails
      
  grafana:
    restart: unless-stopped
    image: grafana/grafana
    container_name: grafana-${teamname:-defaultASW}
    profiles: [ "dev", "prod" ]
    networks:
      - mynetwork
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SERVER_HTTP_PORT=9091
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "9091:9091"
    depends_on: 
      - prometheus

# RELATIONAL DATABASES 
  FriendDataDB:
    restart: unless-stopped
    container_name: FriendDataDB-${teamname:-defaultASW}
    image: mariadb
    profiles: ["dev", "prod"]
    volumes:
      - friend_data:/var/lib/mysql
    ports:
      - "9003:9003"
    environment:
      - MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=1 # This should be done in a real production server, im aware.
      - MARIADB_DATABASE=db
      - MYSQL_TCP_PORT=9003
      - MYSQL_UNIX_PORT=9003
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect"]
      interval: 2s
      timeout: 3s
      retries: 10
    networks:
      - mynetwork

  UserDataDB:
    restart: unless-stopped
    container_name: UserDataDB-${teamname:-defaultASW}
    image: mariadb
    profiles: ["dev", "prod"]
    volumes:
      - user_data:/var/lib/mysql
    ports:
      - "9001:9001"
    environment:
      - MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=1 # This should be done in a real production server, im aware.
      - MARIADB_DATABASE=db
      - MYSQL_TCP_PORT=9001
      - MYSQL_UNIX_PORT=9001
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect"]
      interval: 2s
      timeout: 3s
      retries: 10
    networks:
      - mynetwork

  GameDataDB:
    restart: unless-stopped
    container_name: GameDataDB-${teamname:-defaultASW}
    image: mariadb
    profiles: ["dev", "prod"]
    volumes:
      - game_data:/var/lib/mysql
    ports:
      - "9002:9002"
    environment:
      - MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=1 # This should be done in a real production server, im aware.
      - MARIADB_DATABASE=db
      - MYSQL_TCP_PORT=9002
      - MYSQL_UNIX_PORT=9002
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect"]
      interval: 2s
      timeout: 3s
      retries: 10
    networks:
      - mynetwork

# Non relational DB
  mongodb:
    restart: unless-stopped
    container_name: mongodb-${teamname:-defaultASW}
    image: mongo
    profiles: [ "dev", "prod" ]
    ports:
      - 27017:27017
    networks:
      - mynetwork

  
volumes:
  user_data:
  game_data:
  prometheus_data: 
  grafana_data: 
  friend_data:

networks:
  mynetwork:
    driver: bridge
