openapi: 3.0.0
info:
  title: Authentication Service API
  description: API endpoints for user authentication
  version: 1.0.0
servers:
  - url: http://localhost:8001
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user123
                password:
                  type: string
                  example: password123
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '200':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Nombre de usuario no disponible"
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      summary: Log in with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user123
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuario o contrase√±a incorrectos"
        '500':
          description: Internal server error

  /api/auth/verify:
    post:
      summary: Verify user authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token is valid
        '401':
          description: Invalid or expired token
        '500':
          description: Internal server error

  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
        '500':
          description: Internal server error

    /api/user/getUsers:
    get:
      summary: Obtener todos los usuarios
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "User1"
                    id:
                      type: integer
                      example: "1234"

  /api/user/getUser:
    get:
      summary: Obtener un usuario por ID
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
            example: "1234"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "User1"
                      id:
                        type: integer
                        example: "1234"
        '401':
          description: Usuario no encontrado
      requestBody:
        required: false
        content:
          application/json: {}

  /api/user/deleteUser:
    post:
      summary: Eliminar un usuario por ID
      requestBody:
        required: true
        content:
          application/json: {}
      responses:
        '200':
          description: Usuario borrado
        '401':
          description: Usuario no encontrado
        '500':
          description: Error del servidor
